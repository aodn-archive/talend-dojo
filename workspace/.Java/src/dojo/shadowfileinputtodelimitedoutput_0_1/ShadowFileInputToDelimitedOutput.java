// ============================================================================
//
// Copyright (c) 2005-2012, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / JobDesigner (CodeGenerator version 5.2.0.M4_r90320)
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================
package dojo.shadowfileinputtodelimitedoutput_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: ShadowFileInputToDelimitedOutput Purpose: <br>
 * Description:  <br>
 * @author 
 * @version 5.2.0.M4_r90320
 * @status 
 */
public class ShadowFileInputToDelimitedOutput implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "ShadowFileInputToDelimitedOutput";
	private final String projectName = "DOJO";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		globalMap.put(KEY_DB_DATASOURCES, dataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception = null;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						e.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					ShadowFileInputToDelimitedOutput.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(ShadowFileInputToDelimitedOutput.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			} else {

				status = "failure";

			}
		}
	}

	public void tFileInputExcel_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputExcel", System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tFileOutputDelimited_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited", System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tFileInputExcel_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	private ESBProviderCallback callback = null;

	public void setProviderCallback(ESBProviderCallback callback) {
	}

	public ESBEndpointInfo getEndpoint() {
		return null;
	}

	public static class RowStruct implements
			routines.system.IPersistableRow<RowStruct> {
		final static byte[] commonByteArrayLock_DOJO_ShadowFileInputToDelimitedOutput = new byte[0];
		static byte[] commonByteArray_DOJO_ShadowFileInputToDelimitedOutput = new byte[0];

		public String A;

		public String getA() {
			return this.A;
		}

		public String B;

		public String getB() {
			return this.B;
		}

		public String C;

		public String getC() {
			return this.C;
		}

		public String D;

		public String getD() {
			return this.D;
		}

		public String E;

		public String getE() {
			return this.E;
		}

		public String F;

		public String getF() {
			return this.F;
		}

		public String G;

		public String getG() {
			return this.G;
		}

		public String H;

		public String getH() {
			return this.H;
		}

		public String I;

		public String getI() {
			return this.I;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DOJO_ShadowFileInputToDelimitedOutput.length) {
					if (length < 1024
							&& commonByteArray_DOJO_ShadowFileInputToDelimitedOutput.length == 0) {
						commonByteArray_DOJO_ShadowFileInputToDelimitedOutput = new byte[1024];
					} else {
						commonByteArray_DOJO_ShadowFileInputToDelimitedOutput = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DOJO_ShadowFileInputToDelimitedOutput,
						0, length);
				strReturn = new String(
						commonByteArray_DOJO_ShadowFileInputToDelimitedOutput,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DOJO_ShadowFileInputToDelimitedOutput) {

				try {

					int length = 0;

					this.A = readString(dis);

					this.B = readString(dis);

					this.C = readString(dis);

					this.D = readString(dis);

					this.E = readString(dis);

					this.F = readString(dis);

					this.G = readString(dis);

					this.H = readString(dis);

					this.I = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.A, dos);

				// String

				writeString(this.B, dos);

				// String

				writeString(this.C, dos);

				// String

				writeString(this.D, dos);

				// String

				writeString(this.E, dos);

				// String

				writeString(this.F, dos);

				// String

				writeString(this.G, dos);

				// String

				writeString(this.H, dos);

				// String

				writeString(this.I, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("A=" + A);
			sb.append(",B=" + B);
			sb.append(",C=" + C);
			sb.append(",D=" + D);
			sb.append(",E=" + E);
			sb.append(",F=" + F);
			sb.append(",G=" + G);
			sb.append(",H=" + H);
			sb.append(",I=" + I);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(RowStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcelProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputExcel_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				RowStruct Row = new RowStruct();

				/**
				 * [tFileOutputDelimited begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited", false);
				start_Hash.put("tFileOutputDelimited",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited";

				int tos_count_tFileOutputDelimited = 0;

				String fileName_tFileOutputDelimited = "";
				fileName_tFileOutputDelimited = (new java.io.File(
						"/Users/jburgess/git/talend_dojo_for_pos/workspace/DOJO/temp/preview/Controlled_vocabulary_database_v3.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited = null;
				String extension_tFileOutputDelimited = null;
				String directory_tFileOutputDelimited = null;
				if ((fileName_tFileOutputDelimited.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited.lastIndexOf(".") < fileName_tFileOutputDelimited
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited = fileName_tFileOutputDelimited;
						extension_tFileOutputDelimited = "";
					} else {
						fullName_tFileOutputDelimited = fileName_tFileOutputDelimited
								.substring(0, fileName_tFileOutputDelimited
										.lastIndexOf("."));
						extension_tFileOutputDelimited = fileName_tFileOutputDelimited
								.substring(fileName_tFileOutputDelimited
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited = fileName_tFileOutputDelimited
							.substring(0, fileName_tFileOutputDelimited
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited = fileName_tFileOutputDelimited
								.substring(0, fileName_tFileOutputDelimited
										.lastIndexOf("."));
						extension_tFileOutputDelimited = fileName_tFileOutputDelimited
								.substring(fileName_tFileOutputDelimited
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited = fileName_tFileOutputDelimited;
						extension_tFileOutputDelimited = "";
					}
					directory_tFileOutputDelimited = "";
				}
				boolean isFileGenerated_tFileOutputDelimited = true;
				java.io.File filetFileOutputDelimited = new java.io.File(
						fileName_tFileOutputDelimited);
				globalMap.put("tFileOutputDelimited_FILE_NAME",
						fileName_tFileOutputDelimited);

				String[] headColutFileOutputDelimited = new String[9];
				class CSVBasicSet_tFileOutputDelimited {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator(";");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = textEnclosure_tFileOutputDelimited[0];
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited = 0;
				int splitEvery_tFileOutputDelimited = 1000;
				int splitedFileNo_tFileOutputDelimited = 0;
				int currentRow_tFileOutputDelimited = 0;

				String lineSeparator_tFileOutputDelimited = (String) java.security.AccessController
						.doPrivileged(new sun.security.action.GetPropertyAction(
								"line.separator"));

				CSVBasicSet_tFileOutputDelimited csvSettings_tFileOutputDelimited = new CSVBasicSet_tFileOutputDelimited();
				csvSettings_tFileOutputDelimited.setFieldSeparator(";");
				csvSettings_tFileOutputDelimited.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited.setEscapeAndTextEnclosure(
						"\\", "\"");
				if (csvSettings_tFileOutputDelimited.isUseCRLFRecordDelimiter()) {
					lineSeparator_tFileOutputDelimited = "\r\n";
				} else {
					lineSeparator_tFileOutputDelimited = ""
							+ csvSettings_tFileOutputDelimited.getRowDelim();
				}
				// create directory only if not exists
				if (directory_tFileOutputDelimited != null
						&& directory_tFileOutputDelimited.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited = new java.io.File(
							directory_tFileOutputDelimited);
					if (!dir_tFileOutputDelimited.exists()) {
						dir_tFileOutputDelimited.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited = null;
				try {
					CsvWritertFileOutputDelimited = new com.talend.csv.CSVWriter(
							new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited,
													false), "UTF-8")),
							csvSettings_tFileOutputDelimited.getFieldDelim(),
							'\0', '\0', lineSeparator_tFileOutputDelimited);

					CsvWritertFileOutputDelimited
							.setEscapeChar(csvSettings_tFileOutputDelimited
									.getEscapeChar());
					CsvWritertFileOutputDelimited
							.setQuoteChar(csvSettings_tFileOutputDelimited
									.getTextEnclosure());

					/**
					 * [tFileOutputDelimited begin ] stop
					 */

					/**
					 * [tFileInputExcel begin ] start
					 */

					ok_Hash.put("tFileInputExcel", false);
					start_Hash.put("tFileInputExcel",
							System.currentTimeMillis());
					currentComponent = "tFileInputExcel";

					int tos_count_tFileInputExcel = 0;

					org.apache.log4j.Logger logger_tFileInputExcel = org.apache.log4j.Logger
							.getLogger("org.openxml4j.opc");
					logger_tFileInputExcel
							.setLevel(org.apache.log4j.Level.WARN);
					class RegexUtil_tFileInputExcel {

						public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
								org.apache.poi.xssf.usermodel.XSSFWorkbook workbook,
								String oneSheetName, boolean useRegex) {

							java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

							if (useRegex) {// this part process the regex issue

								java.util.regex.Pattern pattern = java.util.regex.Pattern
										.compile(oneSheetName);
								for (org.apache.poi.xssf.usermodel.XSSFSheet sheet : workbook) {
									String sheetName = sheet.getSheetName();
									java.util.regex.Matcher matcher = pattern
											.matcher(sheetName);
									if (matcher.matches()) {
										if (sheet != null) {
											list.add(sheet);
										}
									}
								}

							} else {
								org.apache.poi.xssf.usermodel.XSSFSheet sheet = workbook
										.getSheet(oneSheetName);
								if (sheet != null) {
									list.add(sheet);
								}

							}

							return list;
						}

						public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
								org.apache.poi.xssf.usermodel.XSSFWorkbook workbook,
								int index, boolean useRegex) {
							java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
							org.apache.poi.xssf.usermodel.XSSFSheet sheet = workbook
									.getSheetAt(index);
							if (sheet != null) {
								list.add(sheet);
							}
							return list;
						}

					}
					RegexUtil_tFileInputExcel regexUtil_tFileInputExcel = new RegexUtil_tFileInputExcel();

					Object source_tFileInputExcel = "/Users/jburgess/Dropbox/IMOS/talend_dojo_for_pos/Controlled_vocabulary_database_v3.xlsx";
					org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel = null;

					if (source_tFileInputExcel instanceof java.io.InputStream
							|| source_tFileInputExcel instanceof String) {
						workbook_tFileInputExcel = new org.apache.poi.xssf.usermodel.XSSFWorkbook(
								"/Users/jburgess/Dropbox/IMOS/talend_dojo_for_pos/Controlled_vocabulary_database_v3.xlsx");
					} else {
						workbook_tFileInputExcel = null;
						throw new Exception(
								"The data source should be specified as Inputstream or File Path!");
					}
					try {

						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
						sheetList_tFileInputExcel
								.addAll(regexUtil_tFileInputExcel.getSheets(
										workbook_tFileInputExcel,
										"Vocabulary_Register", false));
						if (sheetList_tFileInputExcel.size() <= 0) {
							throw new RuntimeException(
									"Special sheets not exist!");
						}

						int nb_line_tFileInputExcel = 0;

						int begin_line_tFileInputExcel = 0;

						int footer_input_tFileInputExcel = 0;

						int end_line_tFileInputExcel = 0;
						for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel : sheetList_tFileInputExcel) {
							end_line_tFileInputExcel += (sheet_tFileInputExcel
									.getLastRowNum() + 1);
						}
						end_line_tFileInputExcel -= footer_input_tFileInputExcel;
						int limit_tFileInputExcel = 50;
						int start_column_tFileInputExcel = 1 - 1;
						int end_column_tFileInputExcel = -1;
						;

						org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel = null;
						org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel = sheetList_tFileInputExcel
								.get(0);
						int rowCount_tFileInputExcel = 0;
						int sheetIndex_tFileInputExcel = 0;
						int currentRows_tFileInputExcel = (sheetList_tFileInputExcel
								.get(0).getLastRowNum() + 1);

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel = new java.text.DecimalFormat(
								"#.####################################");
						char decimalChar_tFileInputExcel = df_tFileInputExcel
								.getDecimalFormatSymbols()
								.getDecimalSeparator();
						org.apache.poi.hssf.usermodel.HSSFDataFormatter dataFormat_tFileInputExcel = new org.apache.poi.hssf.usermodel.HSSFDataFormatter();
						java.text.NumberFormat numberFormat_tFileInputExcel = java.text.NumberFormat
								.getInstance();

						for (int i_tFileInputExcel = begin_line_tFileInputExcel; i_tFileInputExcel < end_line_tFileInputExcel; i_tFileInputExcel++) {

							int emptyColumnCount_tFileInputExcel = 0;

							if (limit_tFileInputExcel != -1
									&& nb_line_tFileInputExcel >= limit_tFileInputExcel) {
								break;
							}

							while (i_tFileInputExcel >= rowCount_tFileInputExcel
									+ currentRows_tFileInputExcel) {
								rowCount_tFileInputExcel += currentRows_tFileInputExcel;
								sheet_tFileInputExcel = sheetList_tFileInputExcel
										.get(++sheetIndex_tFileInputExcel);
								currentRows_tFileInputExcel = (sheet_tFileInputExcel
										.getLastRowNum() + 1);
							}
							globalMap.put("tFileInputExcel_CURRENT_SHEET",
									sheet_tFileInputExcel.getSheetName());
							if (rowCount_tFileInputExcel <= i_tFileInputExcel) {
								row_tFileInputExcel = sheet_tFileInputExcel
										.getRow(i_tFileInputExcel
												- rowCount_tFileInputExcel);
							}
							Row = null;
							String[] temp_row_tFileInputExcel = new String[9];
							int excel_end_column_tFileInputExcel;
							if (row_tFileInputExcel == null) {
								excel_end_column_tFileInputExcel = 0;
							} else {
								excel_end_column_tFileInputExcel = row_tFileInputExcel
										.getLastCellNum();
							}
							int actual_end_column_tFileInputExcel;
							if (end_column_tFileInputExcel == -1) {
								actual_end_column_tFileInputExcel = excel_end_column_tFileInputExcel;
							} else {
								actual_end_column_tFileInputExcel = end_column_tFileInputExcel > excel_end_column_tFileInputExcel ? excel_end_column_tFileInputExcel
										: end_column_tFileInputExcel;
							}
							for (int i = 0; i < 9; i++) {
								if (i + start_column_tFileInputExcel < actual_end_column_tFileInputExcel) {
									org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel = row_tFileInputExcel
											.getCell(i
													+ start_column_tFileInputExcel);
									if (cell_tFileInputExcel != null) {
										switch (cell_tFileInputExcel
												.getCellType()) {
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
											temp_row_tFileInputExcel[i] = cell_tFileInputExcel
													.getRichStringCellValue()
													.getString();
											break;
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
											if (org.apache.poi.ss.usermodel.DateUtil
													.isCellDateFormatted(cell_tFileInputExcel)) {
												temp_row_tFileInputExcel[i] = cell_tFileInputExcel
														.getDateCellValue()
														.toString();
											} else {
												temp_row_tFileInputExcel[i] = df_tFileInputExcel
														.format(cell_tFileInputExcel
																.getNumericCellValue());
											}
											break;
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
											temp_row_tFileInputExcel[i] = String
													.valueOf(cell_tFileInputExcel
															.getBooleanCellValue());
											break;
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_FORMULA:
											switch (cell_tFileInputExcel
													.getCachedFormulaResultType()) {
											case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
												temp_row_tFileInputExcel[i] = cell_tFileInputExcel
														.getRichStringCellValue()
														.getString();
												break;
											case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
												if (org.apache.poi.ss.usermodel.DateUtil
														.isCellDateFormatted(cell_tFileInputExcel)) {
													temp_row_tFileInputExcel[i] = cell_tFileInputExcel
															.getDateCellValue()
															.toString();
												} else {
													temp_row_tFileInputExcel[i] = df_tFileInputExcel
															.format(numberFormat_tFileInputExcel
																	.parse(dataFormat_tFileInputExcel
																			.formatCellValue(
																					cell_tFileInputExcel,
																					workbook_tFileInputExcel
																							.getCreationHelper()
																							.createFormulaEvaluator())));
												}
												break;
											case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
												temp_row_tFileInputExcel[i] = String
														.valueOf(cell_tFileInputExcel
																.getBooleanCellValue());
												break;
											default:
												temp_row_tFileInputExcel[i] = "";
											}
											break;
										default:
											temp_row_tFileInputExcel[i] = "";
										}
									} else {
										temp_row_tFileInputExcel[i] = "";
									}

								} else {
									temp_row_tFileInputExcel[i] = "";
								}
							}
							boolean whetherReject_tFileInputExcel = false;
							Row = new RowStruct();
							int curColNum_tFileInputExcel = -1;
							String curColName_tFileInputExcel = "";
							try {
								if (temp_row_tFileInputExcel[0].trim().length() > 0) {
									curColNum_tFileInputExcel = 0 + start_column_tFileInputExcel + 1;
									curColName_tFileInputExcel = "A";

									Row.A = temp_row_tFileInputExcel[0].trim();
								} else {
									Row.A = null;
									emptyColumnCount_tFileInputExcel++;
								}
								if (temp_row_tFileInputExcel[1].trim().length() > 0) {
									curColNum_tFileInputExcel = 1 + start_column_tFileInputExcel + 1;
									curColName_tFileInputExcel = "B";

									Row.B = temp_row_tFileInputExcel[1].trim();
								} else {
									Row.B = null;
									emptyColumnCount_tFileInputExcel++;
								}
								if (temp_row_tFileInputExcel[2].trim().length() > 0) {
									curColNum_tFileInputExcel = 2 + start_column_tFileInputExcel + 1;
									curColName_tFileInputExcel = "C";

									Row.C = temp_row_tFileInputExcel[2].trim();
								} else {
									Row.C = null;
									emptyColumnCount_tFileInputExcel++;
								}
								if (temp_row_tFileInputExcel[3].trim().length() > 0) {
									curColNum_tFileInputExcel = 3 + start_column_tFileInputExcel + 1;
									curColName_tFileInputExcel = "D";

									Row.D = temp_row_tFileInputExcel[3].trim();
								} else {
									Row.D = null;
									emptyColumnCount_tFileInputExcel++;
								}
								if (temp_row_tFileInputExcel[4].trim().length() > 0) {
									curColNum_tFileInputExcel = 4 + start_column_tFileInputExcel + 1;
									curColName_tFileInputExcel = "E";

									Row.E = temp_row_tFileInputExcel[4].trim();
								} else {
									Row.E = null;
									emptyColumnCount_tFileInputExcel++;
								}
								if (temp_row_tFileInputExcel[5].trim().length() > 0) {
									curColNum_tFileInputExcel = 5 + start_column_tFileInputExcel + 1;
									curColName_tFileInputExcel = "F";

									Row.F = temp_row_tFileInputExcel[5].trim();
								} else {
									Row.F = null;
									emptyColumnCount_tFileInputExcel++;
								}
								if (temp_row_tFileInputExcel[6].trim().length() > 0) {
									curColNum_tFileInputExcel = 6 + start_column_tFileInputExcel + 1;
									curColName_tFileInputExcel = "G";

									Row.G = temp_row_tFileInputExcel[6].trim();
								} else {
									Row.G = null;
									emptyColumnCount_tFileInputExcel++;
								}
								if (temp_row_tFileInputExcel[7].trim().length() > 0) {
									curColNum_tFileInputExcel = 7 + start_column_tFileInputExcel + 1;
									curColName_tFileInputExcel = "H";

									Row.H = temp_row_tFileInputExcel[7].trim();
								} else {
									Row.H = null;
									emptyColumnCount_tFileInputExcel++;
								}
								if (temp_row_tFileInputExcel[8].trim().length() > 0) {
									curColNum_tFileInputExcel = 8 + start_column_tFileInputExcel + 1;
									curColName_tFileInputExcel = "I";

									Row.I = temp_row_tFileInputExcel[8].trim();
								} else {
									Row.I = null;
									emptyColumnCount_tFileInputExcel++;
								}

							} catch (Exception e) {
								whetherReject_tFileInputExcel = true;
								System.err.println(e.getMessage());
								Row = null;
							}

							/**
							 * [tFileInputExcel begin ] stop
							 */
							/**
							 * [tFileInputExcel main ] start
							 */

							currentComponent = "tFileInputExcel";

							tos_count_tFileInputExcel++;

							/**
							 * [tFileInputExcel main ] stop
							 */
							// Start of branch "Row"
							if (Row != null) {

								/**
								 * [tFileOutputDelimited main ] start
								 */

								currentComponent = "tFileOutputDelimited";

								String[] rowtFileOutputDelimited = new String[9];

								rowtFileOutputDelimited[0] = Row.A == null ? ""
										: Row.A;

								rowtFileOutputDelimited[1] = Row.B == null ? ""
										: Row.B;

								rowtFileOutputDelimited[2] = Row.C == null ? ""
										: Row.C;

								rowtFileOutputDelimited[3] = Row.D == null ? ""
										: Row.D;

								rowtFileOutputDelimited[4] = Row.E == null ? ""
										: Row.E;

								rowtFileOutputDelimited[5] = Row.F == null ? ""
										: Row.F;

								rowtFileOutputDelimited[6] = Row.G == null ? ""
										: Row.G;

								rowtFileOutputDelimited[7] = Row.H == null ? ""
										: Row.H;

								rowtFileOutputDelimited[8] = Row.I == null ? ""
										: Row.I;

								nb_line_tFileOutputDelimited++;
								CsvWritertFileOutputDelimited
										.writeNext(rowtFileOutputDelimited);

								tos_count_tFileOutputDelimited++;

								/**
								 * [tFileOutputDelimited main ] stop
								 */

							} // End of branch "Row"

							/**
							 * [tFileInputExcel end ] start
							 */

							currentComponent = "tFileInputExcel";

							nb_line_tFileInputExcel++;
						}
						globalMap.put("tFileInputExcel_NB_LINE",
								nb_line_tFileInputExcel);
					} finally {

						if (!(source_tFileInputExcel instanceof java.io.InputStream)) {
							workbook_tFileInputExcel.getPackage().revert();
						}

					}

					ok_Hash.put("tFileInputExcel", true);
					end_Hash.put("tFileInputExcel", System.currentTimeMillis());

					/**
					 * [tFileInputExcel end ] stop
					 */

					/**
					 * [tFileOutputDelimited end ] start
					 */

					currentComponent = "tFileOutputDelimited";

				} finally {

					CsvWritertFileOutputDelimited.close();
					globalMap.put("tFileOutputDelimited_NB_LINE",
							nb_line_tFileOutputDelimited);
				} // finally

				ok_Hash.put("tFileOutputDelimited", true);
				end_Hash.put("tFileOutputDelimited", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputExcel_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Shadow";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal threadLocal = new ThreadLocal();
	{
		java.util.Map threadRunResultMap = new java.util.HashMap();
		threadRunResultMap.put("errorCode", null);
		threadRunResultMap.put("status", "");
		threadLocal.set(threadRunResultMap);
	}

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final ShadowFileInputToDelimitedOutput ShadowFileInputToDelimitedOutputClass = new ShadowFileInputToDelimitedOutput();

		int exitCode = ShadowFileInputToDelimitedOutputClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = ShadowFileInputToDelimitedOutput.class
					.getClassLoader().getResourceAsStream(
							"dojo/shadowfileinputtodelimitedoutput_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}

		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {

		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputExcelProcess(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputExcel) {

			e_tFileInputExcel.printStackTrace();
			globalMap.put("tFileInputExcel_SUBPROCESS_STATE", -1);

		} finally {
		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : ShadowFileInputToDelimitedOutput");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 43445 characters generated by Talend Open Studio for Data Integration on the
 * June 25, 2013 9:58:35 AM EST
 ************************************************************************************************/
