// ============================================================================
//
// Copyright (c) 2005-2012, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / JobDesigner (CodeGenerator version 5.2.0.M4_r90320)
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================
package dojo.just_anything_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: Just_anything Purpose: ETL<br>
 * Description: Leave <br>
 * @author test@talend.com
 * @version 5.2.0.M4_r90320
 * @status 
 */
public class Just_anything implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Just_anything";
	private final String projectName = "DOJO";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		globalMap.put(KEY_DB_DATASOURCES, dataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception = null;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						e.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Just_anything.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Just_anything.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			} else {

				status = "failure";

			}
		}
	}

	public void tFileInputExcel_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tFilterRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFilterRow_2", System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tReplicate_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tReplicate_1", System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tPostgresqlOutput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tFileOutputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogRow_1", System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tFileInputExcel_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	private ESBProviderCallback callback = null;

	public void setProviderCallback(ESBProviderCallback callback) {
	}

	public ESBEndpointInfo getEndpoint() {
		return null;
	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_DOJO_Just_anything = new byte[0];
		static byte[] commonByteArray_DOJO_Just_anything = new byte[0];

		public String Register_Name;

		public String getRegister_Name() {
			return this.Register_Name;
		}

		public String Register_Content_summary;

		public String getRegister_Content_summary() {
			return this.Register_Content_summary;
		}

		public String Register_Language_Name;

		public String getRegister_Language_Name() {
			return this.Register_Language_Name;
		}

		public String Register_Language_Code;

		public String getRegister_Language_Code() {
			return this.Register_Language_Code;
		}

		public String Register_Language_Country;

		public String getRegister_Language_Country() {
			return this.Register_Language_Country;
		}

		public String Register_Language_Encoding;

		public String getRegister_Language_Encoding() {
			return this.Register_Language_Encoding;
		}

		public Float Register_Version;

		public Float getRegister_Version() {
			return this.Register_Version;
		}

		public java.util.Date Register_Date;

		public java.util.Date getRegister_Date() {
			return this.Register_Date;
		}

		public java.util.Date Date_Of_Last_Change;

		public java.util.Date getDate_Of_Last_Change() {
			return this.Date_Of_Last_Change;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DOJO_Just_anything.length) {
					if (length < 1024
							&& commonByteArray_DOJO_Just_anything.length == 0) {
						commonByteArray_DOJO_Just_anything = new byte[1024];
					} else {
						commonByteArray_DOJO_Just_anything = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DOJO_Just_anything, 0, length);
				strReturn = new String(commonByteArray_DOJO_Just_anything, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DOJO_Just_anything) {

				try {

					int length = 0;

					this.Register_Name = readString(dis);

					this.Register_Content_summary = readString(dis);

					this.Register_Language_Name = readString(dis);

					this.Register_Language_Code = readString(dis);

					this.Register_Language_Country = readString(dis);

					this.Register_Language_Encoding = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Register_Version = null;
					} else {
						this.Register_Version = dis.readFloat();
					}

					this.Register_Date = readDate(dis);

					this.Date_Of_Last_Change = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Register_Name, dos);

				// String

				writeString(this.Register_Content_summary, dos);

				// String

				writeString(this.Register_Language_Name, dos);

				// String

				writeString(this.Register_Language_Code, dos);

				// String

				writeString(this.Register_Language_Country, dos);

				// String

				writeString(this.Register_Language_Encoding, dos);

				// Float

				if (this.Register_Version == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Register_Version);
				}

				// java.util.Date

				writeDate(this.Register_Date, dos);

				// java.util.Date

				writeDate(this.Date_Of_Last_Change, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Register_Name=" + Register_Name);
			sb.append(",Register_Content_summary=" + Register_Content_summary);
			sb.append(",Register_Language_Name=" + Register_Language_Name);
			sb.append(",Register_Language_Code=" + Register_Language_Code);
			sb.append(",Register_Language_Country=" + Register_Language_Country);
			sb.append(",Register_Language_Encoding="
					+ Register_Language_Encoding);
			sb.append(",Register_Version=" + String.valueOf(Register_Version));
			sb.append(",Register_Date=" + String.valueOf(Register_Date));
			sb.append(",Date_Of_Last_Change="
					+ String.valueOf(Date_Of_Last_Change));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_DOJO_Just_anything = new byte[0];
		static byte[] commonByteArray_DOJO_Just_anything = new byte[0];

		public String Register_Name;

		public String getRegister_Name() {
			return this.Register_Name;
		}

		public String Register_Content_summary;

		public String getRegister_Content_summary() {
			return this.Register_Content_summary;
		}

		public String Register_Language_Name;

		public String getRegister_Language_Name() {
			return this.Register_Language_Name;
		}

		public String Register_Language_Code;

		public String getRegister_Language_Code() {
			return this.Register_Language_Code;
		}

		public String Register_Language_Country;

		public String getRegister_Language_Country() {
			return this.Register_Language_Country;
		}

		public String Register_Language_Encoding;

		public String getRegister_Language_Encoding() {
			return this.Register_Language_Encoding;
		}

		public Float Register_Version;

		public Float getRegister_Version() {
			return this.Register_Version;
		}

		public java.util.Date Register_Date;

		public java.util.Date getRegister_Date() {
			return this.Register_Date;
		}

		public java.util.Date Date_Of_Last_Change;

		public java.util.Date getDate_Of_Last_Change() {
			return this.Date_Of_Last_Change;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DOJO_Just_anything.length) {
					if (length < 1024
							&& commonByteArray_DOJO_Just_anything.length == 0) {
						commonByteArray_DOJO_Just_anything = new byte[1024];
					} else {
						commonByteArray_DOJO_Just_anything = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DOJO_Just_anything, 0, length);
				strReturn = new String(commonByteArray_DOJO_Just_anything, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DOJO_Just_anything) {

				try {

					int length = 0;

					this.Register_Name = readString(dis);

					this.Register_Content_summary = readString(dis);

					this.Register_Language_Name = readString(dis);

					this.Register_Language_Code = readString(dis);

					this.Register_Language_Country = readString(dis);

					this.Register_Language_Encoding = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Register_Version = null;
					} else {
						this.Register_Version = dis.readFloat();
					}

					this.Register_Date = readDate(dis);

					this.Date_Of_Last_Change = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Register_Name, dos);

				// String

				writeString(this.Register_Content_summary, dos);

				// String

				writeString(this.Register_Language_Name, dos);

				// String

				writeString(this.Register_Language_Code, dos);

				// String

				writeString(this.Register_Language_Country, dos);

				// String

				writeString(this.Register_Language_Encoding, dos);

				// Float

				if (this.Register_Version == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Register_Version);
				}

				// java.util.Date

				writeDate(this.Register_Date, dos);

				// java.util.Date

				writeDate(this.Date_Of_Last_Change, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Register_Name=" + Register_Name);
			sb.append(",Register_Content_summary=" + Register_Content_summary);
			sb.append(",Register_Language_Name=" + Register_Language_Name);
			sb.append(",Register_Language_Code=" + Register_Language_Code);
			sb.append(",Register_Language_Country=" + Register_Language_Country);
			sb.append(",Register_Language_Encoding="
					+ Register_Language_Encoding);
			sb.append(",Register_Version=" + String.valueOf(Register_Version));
			sb.append(",Register_Date=" + String.valueOf(Register_Date));
			sb.append(",Date_Of_Last_Change="
					+ String.valueOf(Date_Of_Last_Change));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_DOJO_Just_anything = new byte[0];
		static byte[] commonByteArray_DOJO_Just_anything = new byte[0];

		public String Register_Name;

		public String getRegister_Name() {
			return this.Register_Name;
		}

		public String Register_Content_summary;

		public String getRegister_Content_summary() {
			return this.Register_Content_summary;
		}

		public String Register_Language_Name;

		public String getRegister_Language_Name() {
			return this.Register_Language_Name;
		}

		public String Register_Language_Code;

		public String getRegister_Language_Code() {
			return this.Register_Language_Code;
		}

		public String Register_Language_Country;

		public String getRegister_Language_Country() {
			return this.Register_Language_Country;
		}

		public String Register_Language_Encoding;

		public String getRegister_Language_Encoding() {
			return this.Register_Language_Encoding;
		}

		public Float Register_Version;

		public Float getRegister_Version() {
			return this.Register_Version;
		}

		public java.util.Date Register_Date;

		public java.util.Date getRegister_Date() {
			return this.Register_Date;
		}

		public java.util.Date Date_Of_Last_Change;

		public java.util.Date getDate_Of_Last_Change() {
			return this.Date_Of_Last_Change;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DOJO_Just_anything.length) {
					if (length < 1024
							&& commonByteArray_DOJO_Just_anything.length == 0) {
						commonByteArray_DOJO_Just_anything = new byte[1024];
					} else {
						commonByteArray_DOJO_Just_anything = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DOJO_Just_anything, 0, length);
				strReturn = new String(commonByteArray_DOJO_Just_anything, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DOJO_Just_anything) {

				try {

					int length = 0;

					this.Register_Name = readString(dis);

					this.Register_Content_summary = readString(dis);

					this.Register_Language_Name = readString(dis);

					this.Register_Language_Code = readString(dis);

					this.Register_Language_Country = readString(dis);

					this.Register_Language_Encoding = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Register_Version = null;
					} else {
						this.Register_Version = dis.readFloat();
					}

					this.Register_Date = readDate(dis);

					this.Date_Of_Last_Change = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Register_Name, dos);

				// String

				writeString(this.Register_Content_summary, dos);

				// String

				writeString(this.Register_Language_Name, dos);

				// String

				writeString(this.Register_Language_Code, dos);

				// String

				writeString(this.Register_Language_Country, dos);

				// String

				writeString(this.Register_Language_Encoding, dos);

				// Float

				if (this.Register_Version == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Register_Version);
				}

				// java.util.Date

				writeDate(this.Register_Date, dos);

				// java.util.Date

				writeDate(this.Date_Of_Last_Change, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Register_Name=" + Register_Name);
			sb.append(",Register_Content_summary=" + Register_Content_summary);
			sb.append(",Register_Language_Name=" + Register_Language_Name);
			sb.append(",Register_Language_Code=" + Register_Language_Code);
			sb.append(",Register_Language_Country=" + Register_Language_Country);
			sb.append(",Register_Language_Encoding="
					+ Register_Language_Encoding);
			sb.append(",Register_Version=" + String.valueOf(Register_Version));
			sb.append(",Register_Date=" + String.valueOf(Register_Date));
			sb.append(",Date_Of_Last_Change="
					+ String.valueOf(Date_Of_Last_Change));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_DOJO_Just_anything = new byte[0];
		static byte[] commonByteArray_DOJO_Just_anything = new byte[0];

		public String Register_Name;

		public String getRegister_Name() {
			return this.Register_Name;
		}

		public String Register_Content_summary;

		public String getRegister_Content_summary() {
			return this.Register_Content_summary;
		}

		public String Register_Language_Name;

		public String getRegister_Language_Name() {
			return this.Register_Language_Name;
		}

		public String Register_Language_Code;

		public String getRegister_Language_Code() {
			return this.Register_Language_Code;
		}

		public String Register_Language_Country;

		public String getRegister_Language_Country() {
			return this.Register_Language_Country;
		}

		public String Register_Language_Encoding;

		public String getRegister_Language_Encoding() {
			return this.Register_Language_Encoding;
		}

		public Float Register_Version;

		public Float getRegister_Version() {
			return this.Register_Version;
		}

		public java.util.Date Register_Date;

		public java.util.Date getRegister_Date() {
			return this.Register_Date;
		}

		public java.util.Date Date_Of_Last_Change;

		public java.util.Date getDate_Of_Last_Change() {
			return this.Date_Of_Last_Change;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DOJO_Just_anything.length) {
					if (length < 1024
							&& commonByteArray_DOJO_Just_anything.length == 0) {
						commonByteArray_DOJO_Just_anything = new byte[1024];
					} else {
						commonByteArray_DOJO_Just_anything = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DOJO_Just_anything, 0, length);
				strReturn = new String(commonByteArray_DOJO_Just_anything, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DOJO_Just_anything) {

				try {

					int length = 0;

					this.Register_Name = readString(dis);

					this.Register_Content_summary = readString(dis);

					this.Register_Language_Name = readString(dis);

					this.Register_Language_Code = readString(dis);

					this.Register_Language_Country = readString(dis);

					this.Register_Language_Encoding = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Register_Version = null;
					} else {
						this.Register_Version = dis.readFloat();
					}

					this.Register_Date = readDate(dis);

					this.Date_Of_Last_Change = readDate(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Register_Name, dos);

				// String

				writeString(this.Register_Content_summary, dos);

				// String

				writeString(this.Register_Language_Name, dos);

				// String

				writeString(this.Register_Language_Code, dos);

				// String

				writeString(this.Register_Language_Country, dos);

				// String

				writeString(this.Register_Language_Encoding, dos);

				// Float

				if (this.Register_Version == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Register_Version);
				}

				// java.util.Date

				writeDate(this.Register_Date, dos);

				// java.util.Date

				writeDate(this.Date_Of_Last_Change, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Register_Name=" + Register_Name);
			sb.append(",Register_Content_summary=" + Register_Content_summary);
			sb.append(",Register_Language_Name=" + Register_Language_Name);
			sb.append(",Register_Language_Code=" + Register_Language_Code);
			sb.append(",Register_Language_Country=" + Register_Language_Country);
			sb.append(",Register_Language_Encoding="
					+ Register_Language_Encoding);
			sb.append(",Register_Version=" + String.valueOf(Register_Version));
			sb.append(",Register_Date=" + String.valueOf(Register_Date));
			sb.append(",Date_Of_Last_Change="
					+ String.valueOf(Date_Of_Last_Change));
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_DOJO_Just_anything = new byte[0];
		static byte[] commonByteArray_DOJO_Just_anything = new byte[0];

		public String Register_Name;

		public String getRegister_Name() {
			return this.Register_Name;
		}

		public String Register_Content_summary;

		public String getRegister_Content_summary() {
			return this.Register_Content_summary;
		}

		public String Register_Language_Name;

		public String getRegister_Language_Name() {
			return this.Register_Language_Name;
		}

		public String Register_Language_Code;

		public String getRegister_Language_Code() {
			return this.Register_Language_Code;
		}

		public String Register_Language_Country;

		public String getRegister_Language_Country() {
			return this.Register_Language_Country;
		}

		public String Register_Language_Encoding;

		public String getRegister_Language_Encoding() {
			return this.Register_Language_Encoding;
		}

		public Float Register_Version;

		public Float getRegister_Version() {
			return this.Register_Version;
		}

		public java.util.Date Register_Date;

		public java.util.Date getRegister_Date() {
			return this.Register_Date;
		}

		public java.util.Date Date_Of_Last_Change;

		public java.util.Date getDate_Of_Last_Change() {
			return this.Date_Of_Last_Change;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DOJO_Just_anything.length) {
					if (length < 1024
							&& commonByteArray_DOJO_Just_anything.length == 0) {
						commonByteArray_DOJO_Just_anything = new byte[1024];
					} else {
						commonByteArray_DOJO_Just_anything = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DOJO_Just_anything, 0, length);
				strReturn = new String(commonByteArray_DOJO_Just_anything, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DOJO_Just_anything) {

				try {

					int length = 0;

					this.Register_Name = readString(dis);

					this.Register_Content_summary = readString(dis);

					this.Register_Language_Name = readString(dis);

					this.Register_Language_Code = readString(dis);

					this.Register_Language_Country = readString(dis);

					this.Register_Language_Encoding = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Register_Version = null;
					} else {
						this.Register_Version = dis.readFloat();
					}

					this.Register_Date = readDate(dis);

					this.Date_Of_Last_Change = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Register_Name, dos);

				// String

				writeString(this.Register_Content_summary, dos);

				// String

				writeString(this.Register_Language_Name, dos);

				// String

				writeString(this.Register_Language_Code, dos);

				// String

				writeString(this.Register_Language_Country, dos);

				// String

				writeString(this.Register_Language_Encoding, dos);

				// Float

				if (this.Register_Version == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Register_Version);
				}

				// java.util.Date

				writeDate(this.Register_Date, dos);

				// java.util.Date

				writeDate(this.Date_Of_Last_Change, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Register_Name=" + Register_Name);
			sb.append(",Register_Content_summary=" + Register_Content_summary);
			sb.append(",Register_Language_Name=" + Register_Language_Name);
			sb.append(",Register_Language_Code=" + Register_Language_Code);
			sb.append(",Register_Language_Country=" + Register_Language_Country);
			sb.append(",Register_Language_Encoding="
					+ Register_Language_Encoding);
			sb.append(",Register_Version=" + String.valueOf(Register_Version));
			sb.append(",Register_Date=" + String.valueOf(Register_Date));
			sb.append(",Date_Of_Last_Change="
					+ String.valueOf(Date_Of_Last_Change));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row2Struct row2 = new row2Struct();
				row4Struct row4 = new row4Struct();
				row5Struct row5 = new row5Struct();
				row3Struct row3 = new row3Struct();

				/**
				 * [tPostgresqlOutput_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_1", false);
				start_Hash.put("tPostgresqlOutput_1",
						System.currentTimeMillis());
				currentComponent = "tPostgresqlOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
				}

				int tos_count_tPostgresqlOutput_1 = 0;

				String dbschema_tPostgresqlOutput_1 = null;
				dbschema_tPostgresqlOutput_1 = "public";

				String tableName_tPostgresqlOutput_1 = null;
				if (dbschema_tPostgresqlOutput_1 == null
						|| dbschema_tPostgresqlOutput_1.trim().length() == 0) {
					tableName_tPostgresqlOutput_1 = "test1";
				} else {
					tableName_tPostgresqlOutput_1 = dbschema_tPostgresqlOutput_1
							+ "\".\"" + "test1";
				}

				int nb_line_tPostgresqlOutput_1 = 0;
				int nb_line_update_tPostgresqlOutput_1 = 0;
				int nb_line_inserted_tPostgresqlOutput_1 = 0;
				int nb_line_deleted_tPostgresqlOutput_1 = 0;
				int nb_line_rejected_tPostgresqlOutput_1 = 0;

				int deletedCount_tPostgresqlOutput_1 = 0;
				int updatedCount_tPostgresqlOutput_1 = 0;
				int insertedCount_tPostgresqlOutput_1 = 0;
				int rejectedCount_tPostgresqlOutput_1 = 0;

				boolean whetherReject_tPostgresqlOutput_1 = false;

				java.sql.Connection conn_tPostgresqlOutput_1 = null;
				java.lang.Class.forName("org.postgresql.Driver");
				String url_tPostgresqlOutput_1 = "jdbc:postgresql://"
						+ "localhost" + ":" + "5432" + "/" + "dojo";
				String dbUser_tPostgresqlOutput_1 = "postgres";
				String dbPwd_tPostgresqlOutput_1 = "postgres";
				conn_tPostgresqlOutput_1 = java.sql.DriverManager
						.getConnection(url_tPostgresqlOutput_1,
								dbUser_tPostgresqlOutput_1,
								dbPwd_tPostgresqlOutput_1);

				conn_tPostgresqlOutput_1.setAutoCommit(false);
				int commitEvery_tPostgresqlOutput_1 = 10000;
				int commitCounter_tPostgresqlOutput_1 = 0;

				int batchSize_tPostgresqlOutput_1 = 10000;
				int batchSizeCounter_tPostgresqlOutput_1 = 0;

				int count_tPostgresqlOutput_1 = 0;
				java.sql.DatabaseMetaData dbMetaData_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.getMetaData();
				java.sql.ResultSet rsTable_tPostgresqlOutput_1 = dbMetaData_tPostgresqlOutput_1
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tPostgresqlOutput_1 = false;
				while (rsTable_tPostgresqlOutput_1.next()) {
					String table_tPostgresqlOutput_1 = rsTable_tPostgresqlOutput_1
							.getString("TABLE_NAME");
					String schema_tPostgresqlOutput_1 = rsTable_tPostgresqlOutput_1
							.getString("TABLE_SCHEM");
					if (table_tPostgresqlOutput_1.equalsIgnoreCase("test1")
							&& (schema_tPostgresqlOutput_1
									.equals(dbschema_tPostgresqlOutput_1) || dbschema_tPostgresqlOutput_1
									.trim().length() == 0)) {
						whetherExist_tPostgresqlOutput_1 = true;
						break;
					}
				}
				rsTable_tPostgresqlOutput_1.close();
				if (whetherExist_tPostgresqlOutput_1) {
					java.sql.Statement stmtDrop_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
							.createStatement();
					stmtDrop_tPostgresqlOutput_1.execute("DROP TABLE \""
							+ tableName_tPostgresqlOutput_1 + "\"");
					stmtDrop_tPostgresqlOutput_1.close();
				}
				java.sql.Statement stmtCreate_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.createStatement();
				stmtCreate_tPostgresqlOutput_1
						.execute("CREATE TABLE \""
								+ tableName_tPostgresqlOutput_1
								+ "\"(\"Register_Name\" VARCHAR(49)  ,\"Register_Content_summary\" VARCHAR(197)  ,\"Register_Language_Name\" VARCHAR(7)  ,\"Register_Language_Code\" VARCHAR(3)  ,\"Register_Language_Country\" VARCHAR(2)  ,\"Register_Language_Encoding\" VARCHAR(4)  ,\"Register_Version\" FLOAT4 ,\"Register_Date\" TIMESTAMP(28)  ,\"Date_Of_Last_Change\" TIMESTAMP(28)  )");
				stmtCreate_tPostgresqlOutput_1.close();
				String insert_tPostgresqlOutput_1 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_1
						+ "\" (\"Register_Name\",\"Register_Content_summary\",\"Register_Language_Name\",\"Register_Language_Code\",\"Register_Language_Country\",\"Register_Language_Encoding\",\"Register_Version\",\"Register_Date\",\"Date_Of_Last_Change\") VALUES (?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.prepareStatement(insert_tPostgresqlOutput_1);

				/**
				 * [tPostgresqlOutput_1 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_1";

				if (execStat) {
					runStat.updateStatOnConnection("row5" + iterateId, 0, 0);
				}

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						"/Users/jburgess/git/talend_dojo_for_pos/workspace/out.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(0, fileName_tFileOutputDelimited_1
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);

				int nb_line_tFileOutputDelimited_1 = 0;
				int splitEvery_tFileOutputDelimited_1 = 1000;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /**
				 * Start field
				 * tFileOutputDelimited_1:FIELDSEPARATOR
				 */
				","/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
				 * Start
				 * field tFileOutputDelimited_1:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null
						&& directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
							directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;
				try {
					outtFileOutputDelimited_1 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_1,
											false), "ISO-8859-15"));

					/**
					 * [tFileOutputDelimited_1 begin ] stop
					 */

					/**
					 * [tReplicate_1 begin ] start
					 */

					ok_Hash.put("tReplicate_1", false);
					start_Hash.put("tReplicate_1", System.currentTimeMillis());
					currentComponent = "tReplicate_1";

					if (execStat) {
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					}

					int tos_count_tReplicate_1 = 0;

					/**
					 * [tReplicate_1 begin ] stop
					 */

					/**
					 * [tLogRow_1 begin ] start
					 */

					ok_Hash.put("tLogRow_1", false);
					start_Hash.put("tLogRow_1", System.currentTimeMillis());
					currentComponent = "tLogRow_1";

					if (execStat) {
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					}

					int tos_count_tLogRow_1 = 0;

					// /////////////////////

					final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
					java.io.PrintStream consoleOut_tLogRow_1 = null;

					StringBuilder strBuffer_tLogRow_1 = null;
					int nb_line_tLogRow_1 = 0;
					// /////////////////////

					/**
					 * [tLogRow_1 begin ] stop
					 */

					/**
					 * [tFilterRow_2 begin ] start
					 */

					ok_Hash.put("tFilterRow_2", false);
					start_Hash.put("tFilterRow_2", System.currentTimeMillis());
					currentComponent = "tFilterRow_2";

					if (execStat) {
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					}

					int tos_count_tFilterRow_2 = 0;
					int nb_line_tFilterRow_2 = 0;
					int nb_line_ok_tFilterRow_2 = 0;
					int nb_line_reject_tFilterRow_2 = 0;

					class Operator_tFilterRow_2 {
						private String sErrorMsg = "";
						private boolean bMatchFlag = true;
						private String sUnionFlag = "&&";

						public Operator_tFilterRow_2(String unionFlag) {
							sUnionFlag = unionFlag;
							bMatchFlag = "||".equals(unionFlag) ? false : true;
						}

						public String getErrorMsg() {
							if (sErrorMsg != null && sErrorMsg.length() > 1)
								return sErrorMsg.substring(1);
							else
								return null;
						}

						public boolean getMatchFlag() {
							return bMatchFlag;
						}

						public void matches(boolean partMatched, String reason) {
							// no need to care about the next judgement
							if ("||".equals(sUnionFlag) && bMatchFlag) {
								return;
							}

							if (!partMatched) {
								sErrorMsg += "|" + reason;
							}

							if ("||".equals(sUnionFlag))
								bMatchFlag = bMatchFlag || partMatched;
							else
								bMatchFlag = bMatchFlag && partMatched;
						}
					}

					/**
					 * [tFilterRow_2 begin ] stop
					 */

					/**
					 * [tFileInputExcel_1 begin ] start
					 */

					ok_Hash.put("tFileInputExcel_1", false);
					start_Hash.put("tFileInputExcel_1",
							System.currentTimeMillis());
					currentComponent = "tFileInputExcel_1";

					int tos_count_tFileInputExcel_1 = 0;

					org.apache.log4j.Logger logger_tFileInputExcel_1 = org.apache.log4j.Logger
							.getLogger("org.openxml4j.opc");
					logger_tFileInputExcel_1
							.setLevel(org.apache.log4j.Level.WARN);
					class RegexUtil_tFileInputExcel_1 {

						public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
								org.apache.poi.xssf.usermodel.XSSFWorkbook workbook,
								String oneSheetName, boolean useRegex) {

							java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

							if (useRegex) {// this part process the regex issue

								java.util.regex.Pattern pattern = java.util.regex.Pattern
										.compile(oneSheetName);
								for (org.apache.poi.xssf.usermodel.XSSFSheet sheet : workbook) {
									String sheetName = sheet.getSheetName();
									java.util.regex.Matcher matcher = pattern
											.matcher(sheetName);
									if (matcher.matches()) {
										if (sheet != null) {
											list.add(sheet);
										}
									}
								}

							} else {
								org.apache.poi.xssf.usermodel.XSSFSheet sheet = workbook
										.getSheet(oneSheetName);
								if (sheet != null) {
									list.add(sheet);
								}

							}

							return list;
						}

						public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
								org.apache.poi.xssf.usermodel.XSSFWorkbook workbook,
								int index, boolean useRegex) {
							java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
							org.apache.poi.xssf.usermodel.XSSFSheet sheet = workbook
									.getSheetAt(index);
							if (sheet != null) {
								list.add(sheet);
							}
							return list;
						}

					}
					RegexUtil_tFileInputExcel_1 regexUtil_tFileInputExcel_1 = new RegexUtil_tFileInputExcel_1();

					Object source_tFileInputExcel_1 = "/Users/jburgess/Dropbox/IMOS/talend_dojo_for_pos/Controlled_vocabulary_database_v3.xlsx";
					org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_1 = null;

					if (source_tFileInputExcel_1 instanceof java.io.InputStream
							|| source_tFileInputExcel_1 instanceof String) {
						workbook_tFileInputExcel_1 = new org.apache.poi.xssf.usermodel.XSSFWorkbook(
								"/Users/jburgess/Dropbox/IMOS/talend_dojo_for_pos/Controlled_vocabulary_database_v3.xlsx");
					} else {
						workbook_tFileInputExcel_1 = null;
						throw new Exception(
								"The data source should be specified as Inputstream or File Path!");
					}
					try {

						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
						sheetList_tFileInputExcel_1
								.addAll(regexUtil_tFileInputExcel_1.getSheets(
										workbook_tFileInputExcel_1,
										"Vocabulary_Register", false));
						if (sheetList_tFileInputExcel_1.size() <= 0) {
							throw new RuntimeException(
									"Special sheets not exist!");
						}

						int nb_line_tFileInputExcel_1 = 0;

						int begin_line_tFileInputExcel_1 = 1;

						int footer_input_tFileInputExcel_1 = 0;

						int end_line_tFileInputExcel_1 = 0;
						for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
							end_line_tFileInputExcel_1 += (sheet_tFileInputExcel_1
									.getLastRowNum() + 1);
						}
						end_line_tFileInputExcel_1 -= footer_input_tFileInputExcel_1;
						int limit_tFileInputExcel_1 = -1;
						int start_column_tFileInputExcel_1 = 1 - 1;
						int end_column_tFileInputExcel_1 = -1;
						;

						org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_1 = null;
						org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1
								.get(0);
						int rowCount_tFileInputExcel_1 = 0;
						int sheetIndex_tFileInputExcel_1 = 0;
						int currentRows_tFileInputExcel_1 = (sheetList_tFileInputExcel_1
								.get(0).getLastRowNum() + 1);

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_1 = new java.text.DecimalFormat(
								"#.####################################");
						char decimalChar_tFileInputExcel_1 = df_tFileInputExcel_1
								.getDecimalFormatSymbols()
								.getDecimalSeparator();
						org.apache.poi.hssf.usermodel.HSSFDataFormatter dataFormat_tFileInputExcel_1 = new org.apache.poi.hssf.usermodel.HSSFDataFormatter();
						java.text.NumberFormat numberFormat_tFileInputExcel_1 = java.text.NumberFormat
								.getInstance();

						for (int i_tFileInputExcel_1 = begin_line_tFileInputExcel_1; i_tFileInputExcel_1 < end_line_tFileInputExcel_1; i_tFileInputExcel_1++) {

							int emptyColumnCount_tFileInputExcel_1 = 0;

							if (limit_tFileInputExcel_1 != -1
									&& nb_line_tFileInputExcel_1 >= limit_tFileInputExcel_1) {
								break;
							}

							while (i_tFileInputExcel_1 >= rowCount_tFileInputExcel_1
									+ currentRows_tFileInputExcel_1) {
								rowCount_tFileInputExcel_1 += currentRows_tFileInputExcel_1;
								sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1
										.get(++sheetIndex_tFileInputExcel_1);
								currentRows_tFileInputExcel_1 = (sheet_tFileInputExcel_1
										.getLastRowNum() + 1);
							}
							globalMap.put("tFileInputExcel_1_CURRENT_SHEET",
									sheet_tFileInputExcel_1.getSheetName());
							if (rowCount_tFileInputExcel_1 <= i_tFileInputExcel_1) {
								row_tFileInputExcel_1 = sheet_tFileInputExcel_1
										.getRow(i_tFileInputExcel_1
												- rowCount_tFileInputExcel_1);
							}
							row1 = null;
							String[] temp_row_tFileInputExcel_1 = new String[9];
							int excel_end_column_tFileInputExcel_1;
							if (row_tFileInputExcel_1 == null) {
								excel_end_column_tFileInputExcel_1 = 0;
							} else {
								excel_end_column_tFileInputExcel_1 = row_tFileInputExcel_1
										.getLastCellNum();
							}
							int actual_end_column_tFileInputExcel_1;
							if (end_column_tFileInputExcel_1 == -1) {
								actual_end_column_tFileInputExcel_1 = excel_end_column_tFileInputExcel_1;
							} else {
								actual_end_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 > excel_end_column_tFileInputExcel_1 ? excel_end_column_tFileInputExcel_1
										: end_column_tFileInputExcel_1;
							}
							for (int i = 0; i < 9; i++) {
								if (i + start_column_tFileInputExcel_1 < actual_end_column_tFileInputExcel_1) {
									org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_1 = row_tFileInputExcel_1
											.getCell(i
													+ start_column_tFileInputExcel_1);
									if (cell_tFileInputExcel_1 != null) {
										switch (cell_tFileInputExcel_1
												.getCellType()) {
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
											temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
													.getRichStringCellValue()
													.getString();
											break;
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
											if (org.apache.poi.ss.usermodel.DateUtil
													.isCellDateFormatted(cell_tFileInputExcel_1)) {
												temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
														.getDateCellValue()
														.toString();
											} else {
												temp_row_tFileInputExcel_1[i] = df_tFileInputExcel_1
														.format(cell_tFileInputExcel_1
																.getNumericCellValue());
											}
											break;
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
											temp_row_tFileInputExcel_1[i] = String
													.valueOf(cell_tFileInputExcel_1
															.getBooleanCellValue());
											break;
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_FORMULA:
											switch (cell_tFileInputExcel_1
													.getCachedFormulaResultType()) {
											case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
												temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
														.getRichStringCellValue()
														.getString();
												break;
											case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
												if (org.apache.poi.ss.usermodel.DateUtil
														.isCellDateFormatted(cell_tFileInputExcel_1)) {
													temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
															.getDateCellValue()
															.toString();
												} else {
													temp_row_tFileInputExcel_1[i] = df_tFileInputExcel_1
															.format(numberFormat_tFileInputExcel_1
																	.parse(dataFormat_tFileInputExcel_1
																			.formatCellValue(
																					cell_tFileInputExcel_1,
																					workbook_tFileInputExcel_1
																							.getCreationHelper()
																							.createFormulaEvaluator())));
												}
												break;
											case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
												temp_row_tFileInputExcel_1[i] = String
														.valueOf(cell_tFileInputExcel_1
																.getBooleanCellValue());
												break;
											default:
												temp_row_tFileInputExcel_1[i] = "";
											}
											break;
										default:
											temp_row_tFileInputExcel_1[i] = "";
										}
									} else {
										temp_row_tFileInputExcel_1[i] = "";
									}

								} else {
									temp_row_tFileInputExcel_1[i] = "";
								}
							}
							boolean whetherReject_tFileInputExcel_1 = false;
							row1 = new row1Struct();
							int curColNum_tFileInputExcel_1 = -1;
							String curColName_tFileInputExcel_1 = "";
							try {
								if (temp_row_tFileInputExcel_1[0].length() > 0) {
									curColNum_tFileInputExcel_1 = 0 + start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Register_Name";

									row1.Register_Name = temp_row_tFileInputExcel_1[0];
								} else {
									row1.Register_Name = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								if (temp_row_tFileInputExcel_1[1].length() > 0) {
									curColNum_tFileInputExcel_1 = 1 + start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Register_Content_summary";

									row1.Register_Content_summary = temp_row_tFileInputExcel_1[1];
								} else {
									row1.Register_Content_summary = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								if (temp_row_tFileInputExcel_1[2].length() > 0) {
									curColNum_tFileInputExcel_1 = 2 + start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Register_Language_Name";

									row1.Register_Language_Name = temp_row_tFileInputExcel_1[2];
								} else {
									row1.Register_Language_Name = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								if (temp_row_tFileInputExcel_1[3].length() > 0) {
									curColNum_tFileInputExcel_1 = 3 + start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Register_Language_Code";

									row1.Register_Language_Code = temp_row_tFileInputExcel_1[3];
								} else {
									row1.Register_Language_Code = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								if (temp_row_tFileInputExcel_1[4].length() > 0) {
									curColNum_tFileInputExcel_1 = 4 + start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Register_Language_Country";

									row1.Register_Language_Country = temp_row_tFileInputExcel_1[4];
								} else {
									row1.Register_Language_Country = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								if (temp_row_tFileInputExcel_1[5].length() > 0) {
									curColNum_tFileInputExcel_1 = 5 + start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Register_Language_Encoding";

									row1.Register_Language_Encoding = temp_row_tFileInputExcel_1[5];
								} else {
									row1.Register_Language_Encoding = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								if (temp_row_tFileInputExcel_1[6].length() > 0) {
									curColNum_tFileInputExcel_1 = 6 + start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Register_Version";

									row1.Register_Version = ParserUtils
											.parseTo_Float(ParserUtils
													.parseTo_Number(
															temp_row_tFileInputExcel_1[6],
															null,
															'.' == decimalChar_tFileInputExcel_1 ? null
																	: decimalChar_tFileInputExcel_1));
								} else {
									row1.Register_Version = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								if (temp_row_tFileInputExcel_1[7].length() > 0) {
									curColNum_tFileInputExcel_1 = 7 + start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Register_Date";

									if (7 < actual_end_column_tFileInputExcel_1) {
										try {
											if (row_tFileInputExcel_1
													.getCell(
															7 + start_column_tFileInputExcel_1)
													.getCellType() == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC
													&& org.apache.poi.ss.usermodel.DateUtil
															.isCellDateFormatted(row_tFileInputExcel_1
																	.getCell(7 + start_column_tFileInputExcel_1))) {
												row1.Register_Date = row_tFileInputExcel_1
														.getCell(
																7 + start_column_tFileInputExcel_1)
														.getDateCellValue();
											} else {
												row1.Register_Date = ParserUtils
														.parseTo_Date(
																temp_row_tFileInputExcel_1[7],
																"dd/MM/yyyy");
											}
										} catch (Exception e) {

											throw new RuntimeException(
													"The cell format is not Date in ( Row. "
															+ (nb_line_tFileInputExcel_1 + 1)
															+ " and ColumnNum. "
															+ curColNum_tFileInputExcel_1
															+ " )");
										}
									}

								} else {
									row1.Register_Date = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								if (temp_row_tFileInputExcel_1[8].length() > 0) {
									curColNum_tFileInputExcel_1 = 8 + start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Date_Of_Last_Change";

									if (8 < actual_end_column_tFileInputExcel_1) {
										try {
											if (row_tFileInputExcel_1
													.getCell(
															8 + start_column_tFileInputExcel_1)
													.getCellType() == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC
													&& org.apache.poi.ss.usermodel.DateUtil
															.isCellDateFormatted(row_tFileInputExcel_1
																	.getCell(8 + start_column_tFileInputExcel_1))) {
												row1.Date_Of_Last_Change = row_tFileInputExcel_1
														.getCell(
																8 + start_column_tFileInputExcel_1)
														.getDateCellValue();
											} else {
												row1.Date_Of_Last_Change = ParserUtils
														.parseTo_Date(
																temp_row_tFileInputExcel_1[8],
																"dd/MM/yyyy");
											}
										} catch (Exception e) {

											throw new RuntimeException(
													"The cell format is not Date in ( Row. "
															+ (nb_line_tFileInputExcel_1 + 1)
															+ " and ColumnNum. "
															+ curColNum_tFileInputExcel_1
															+ " )");
										}
									}

								} else {
									row1.Date_Of_Last_Change = null;
									emptyColumnCount_tFileInputExcel_1++;
								}

							} catch (Exception e) {
								whetherReject_tFileInputExcel_1 = true;
								System.err.println(e.getMessage());
								row1 = null;
							}

							/**
							 * [tFileInputExcel_1 begin ] stop
							 */
							/**
							 * [tFileInputExcel_1 main ] start
							 */

							currentComponent = "tFileInputExcel_1";

							tos_count_tFileInputExcel_1++;

							/**
							 * [tFileInputExcel_1 main ] stop
							 */
							// Start of branch "row1"
							if (row1 != null) {
								row3 = null;

								/**
								 * [tFilterRow_2 main ] start
								 */

								currentComponent = "tFilterRow_2";

								// row1
								// row1

								if (execStat) {
									runStat.updateStatOnConnection("row1"
											+ iterateId, 1, 1);
								}

								row2 = null;
								row3 = null;
								Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2(
										"&&");
								ope_tFilterRow_2
										.matches(
												(row1.Date_Of_Last_Change == null ? false
														: row1.Date_Of_Last_Change
																.compareTo(new Date(
																		113, 0,
																		1)) > 0),
												"Date_Of_Last_Change.compareTo(new Date(113,0,1)) > 0 failed");

								if (ope_tFilterRow_2.getMatchFlag()) {
									if (row2 == null) {
										row2 = new row2Struct();
									}
									row2.Register_Name = row1.Register_Name;
									row2.Register_Content_summary = row1.Register_Content_summary;
									row2.Register_Language_Name = row1.Register_Language_Name;
									row2.Register_Language_Code = row1.Register_Language_Code;
									row2.Register_Language_Country = row1.Register_Language_Country;
									row2.Register_Language_Encoding = row1.Register_Language_Encoding;
									row2.Register_Version = row1.Register_Version;
									row2.Register_Date = row1.Register_Date;
									row2.Date_Of_Last_Change = row1.Date_Of_Last_Change;
									nb_line_ok_tFilterRow_2++;
								} else {
									if (row3 == null) {
										row3 = new row3Struct();
									}
									row3.Register_Name = row1.Register_Name;
									row3.Register_Content_summary = row1.Register_Content_summary;
									row3.Register_Language_Name = row1.Register_Language_Name;
									row3.Register_Language_Code = row1.Register_Language_Code;
									row3.Register_Language_Country = row1.Register_Language_Country;
									row3.Register_Language_Encoding = row1.Register_Language_Encoding;
									row3.Register_Version = row1.Register_Version;
									row3.Register_Date = row1.Register_Date;
									row3.Date_Of_Last_Change = row1.Date_Of_Last_Change;
									row3.errorMessage = ope_tFilterRow_2
											.getErrorMsg();
									nb_line_reject_tFilterRow_2++;
								}

								nb_line_tFilterRow_2++;

								tos_count_tFilterRow_2++;

								/**
								 * [tFilterRow_2 main ] stop
								 */
								// Start of branch "row2"
								if (row2 != null) {

									/**
									 * [tReplicate_1 main ] start
									 */

									currentComponent = "tReplicate_1";

									// row2
									// row2

									if (execStat) {
										runStat.updateStatOnConnection("row2"
												+ iterateId, 1, 1);
									}

									row4 = new row4Struct();

									row4.Register_Name = row2.Register_Name;
									row4.Register_Content_summary = row2.Register_Content_summary;
									row4.Register_Language_Name = row2.Register_Language_Name;
									row4.Register_Language_Code = row2.Register_Language_Code;
									row4.Register_Language_Country = row2.Register_Language_Country;
									row4.Register_Language_Encoding = row2.Register_Language_Encoding;
									row4.Register_Version = row2.Register_Version;
									row4.Register_Date = row2.Register_Date;
									row4.Date_Of_Last_Change = row2.Date_Of_Last_Change;
									row5 = new row5Struct();

									row5.Register_Name = row2.Register_Name;
									row5.Register_Content_summary = row2.Register_Content_summary;
									row5.Register_Language_Name = row2.Register_Language_Name;
									row5.Register_Language_Code = row2.Register_Language_Code;
									row5.Register_Language_Country = row2.Register_Language_Country;
									row5.Register_Language_Encoding = row2.Register_Language_Encoding;
									row5.Register_Version = row2.Register_Version;
									row5.Register_Date = row2.Register_Date;
									row5.Date_Of_Last_Change = row2.Date_Of_Last_Change;

									tos_count_tReplicate_1++;

									/**
									 * [tReplicate_1 main ] stop
									 */

									/**
									 * [tPostgresqlOutput_1 main ] start
									 */

									currentComponent = "tPostgresqlOutput_1";

									// row4
									// row4

									if (execStat) {
										runStat.updateStatOnConnection("row4"
												+ iterateId, 1, 1);
									}

									whetherReject_tPostgresqlOutput_1 = false;
									if (row4.Register_Name == null) {
										pstmt_tPostgresqlOutput_1.setNull(1,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tPostgresqlOutput_1.setString(1,
												row4.Register_Name);
									}

									if (row4.Register_Content_summary == null) {
										pstmt_tPostgresqlOutput_1.setNull(2,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tPostgresqlOutput_1.setString(2,
												row4.Register_Content_summary);
									}

									if (row4.Register_Language_Name == null) {
										pstmt_tPostgresqlOutput_1.setNull(3,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tPostgresqlOutput_1.setString(3,
												row4.Register_Language_Name);
									}

									if (row4.Register_Language_Code == null) {
										pstmt_tPostgresqlOutput_1.setNull(4,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tPostgresqlOutput_1.setString(4,
												row4.Register_Language_Code);
									}

									if (row4.Register_Language_Country == null) {
										pstmt_tPostgresqlOutput_1.setNull(5,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tPostgresqlOutput_1.setString(5,
												row4.Register_Language_Country);
									}

									if (row4.Register_Language_Encoding == null) {
										pstmt_tPostgresqlOutput_1.setNull(6,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tPostgresqlOutput_1
												.setString(
														6,
														row4.Register_Language_Encoding);
									}

									if (row4.Register_Version == null) {
										pstmt_tPostgresqlOutput_1.setNull(7,
												java.sql.Types.FLOAT);
									} else {
										pstmt_tPostgresqlOutput_1.setFloat(7,
												row4.Register_Version);
									}

									if (row4.Register_Date != null) {
										pstmt_tPostgresqlOutput_1.setTimestamp(
												8,
												new java.sql.Timestamp(
														row4.Register_Date
																.getTime()));
									} else {
										pstmt_tPostgresqlOutput_1.setNull(8,
												java.sql.Types.TIMESTAMP);
									}

									if (row4.Date_Of_Last_Change != null) {
										pstmt_tPostgresqlOutput_1
												.setTimestamp(
														9,
														new java.sql.Timestamp(
																row4.Date_Of_Last_Change
																		.getTime()));
									} else {
										pstmt_tPostgresqlOutput_1.setNull(9,
												java.sql.Types.TIMESTAMP);
									}

									pstmt_tPostgresqlOutput_1.addBatch();
									nb_line_tPostgresqlOutput_1++;

									batchSizeCounter_tPostgresqlOutput_1++;

									if (batchSize_tPostgresqlOutput_1 <= batchSizeCounter_tPostgresqlOutput_1) {
										try {
											int countSum_tPostgresqlOutput_1 = 0;
											for (int countEach_tPostgresqlOutput_1 : pstmt_tPostgresqlOutput_1
													.executeBatch()) {
												countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0
														: countEach_tPostgresqlOutput_1);
											}

											insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;

											batchSizeCounter_tPostgresqlOutput_1 = 0;
										} catch (java.sql.BatchUpdateException e) {

											int countSum_tPostgresqlOutput_1 = 0;
											for (int countEach_tPostgresqlOutput_1 : e
													.getUpdateCounts()) {
												countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0
														: countEach_tPostgresqlOutput_1);
											}

											insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;

											System.err.println(e.getMessage());

										}

									}

									commitCounter_tPostgresqlOutput_1++;
									if (commitEvery_tPostgresqlOutput_1 <= commitCounter_tPostgresqlOutput_1) {

										try {
											int countSum_tPostgresqlOutput_1 = 0;
											for (int countEach_tPostgresqlOutput_1 : pstmt_tPostgresqlOutput_1
													.executeBatch()) {
												countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0
														: countEach_tPostgresqlOutput_1);
											}

											insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;

										} catch (java.sql.BatchUpdateException e) {

											int countSum_tPostgresqlOutput_1 = 0;
											for (int countEach_tPostgresqlOutput_1 : e
													.getUpdateCounts()) {
												countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0
														: countEach_tPostgresqlOutput_1);
											}

											insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;

											System.out.println(e.getMessage());

										}
										conn_tPostgresqlOutput_1.commit();
										commitCounter_tPostgresqlOutput_1 = 0;
									}

									tos_count_tPostgresqlOutput_1++;

									/**
									 * [tPostgresqlOutput_1 main ] stop
									 */

									/**
									 * [tFileOutputDelimited_1 main ] start
									 */

									currentComponent = "tFileOutputDelimited_1";

									// row5
									// row5

									if (execStat) {
										runStat.updateStatOnConnection("row5"
												+ iterateId, 1, 1);
									}

									StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();

									if (row5.Register_Name != null) {

										sb_tFileOutputDelimited_1.append(

										row5.Register_Name

										);

									}

									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);

									if (row5.Register_Content_summary != null) {

										sb_tFileOutputDelimited_1.append(

										row5.Register_Content_summary

										);

									}

									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);

									if (row5.Register_Language_Name != null) {

										sb_tFileOutputDelimited_1.append(

										row5.Register_Language_Name

										);

									}

									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);

									if (row5.Register_Language_Code != null) {

										sb_tFileOutputDelimited_1.append(

										row5.Register_Language_Code

										);

									}

									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);

									if (row5.Register_Language_Country != null) {

										sb_tFileOutputDelimited_1.append(

										row5.Register_Language_Country

										);

									}

									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);

									if (row5.Register_Language_Encoding != null) {

										sb_tFileOutputDelimited_1.append(

										row5.Register_Language_Encoding

										);

									}

									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);

									if (row5.Register_Version != null) {

										sb_tFileOutputDelimited_1.append(

										row5.Register_Version

										);

									}

									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);

									if (row5.Register_Date != null) {

										sb_tFileOutputDelimited_1.append(

										FormatterUtils.format_Date(
												row5.Register_Date,
												"dd/MM/yyyy")

										);

									}

									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);

									if (row5.Date_Of_Last_Change != null) {

										sb_tFileOutputDelimited_1.append(

										FormatterUtils.format_Date(
												row5.Date_Of_Last_Change,
												"dd/MM/yyyy")

										);

									}

									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

									nb_line_tFileOutputDelimited_1++;

									outtFileOutputDelimited_1
											.write(sb_tFileOutputDelimited_1
													.toString());

									tos_count_tFileOutputDelimited_1++;

									/**
									 * [tFileOutputDelimited_1 main ] stop
									 */

								} // End of branch "row2"

								// Start of branch "row3"
								if (row3 != null) {

									/**
									 * [tLogRow_1 main ] start
									 */

									currentComponent = "tLogRow_1";

									// row3
									// row3

									if (execStat) {
										runStat.updateStatOnConnection("row3"
												+ iterateId, 1, 1);
									}

									// /////////////////////

									strBuffer_tLogRow_1 = new StringBuilder();

									if (row3.Register_Name != null) { //

										strBuffer_tLogRow_1.append(String
												.valueOf(row3.Register_Name));

									} //

									strBuffer_tLogRow_1.append("|");

									if (row3.Register_Content_summary != null) { //

										strBuffer_tLogRow_1
												.append(String
														.valueOf(row3.Register_Content_summary));

									} //

									strBuffer_tLogRow_1.append("|");

									if (row3.Register_Language_Name != null) { //

										strBuffer_tLogRow_1
												.append(String
														.valueOf(row3.Register_Language_Name));

									} //

									strBuffer_tLogRow_1.append("|");

									if (row3.Register_Language_Code != null) { //

										strBuffer_tLogRow_1
												.append(String
														.valueOf(row3.Register_Language_Code));

									} //

									strBuffer_tLogRow_1.append("|");

									if (row3.Register_Language_Country != null) { //

										strBuffer_tLogRow_1
												.append(String
														.valueOf(row3.Register_Language_Country));

									} //

									strBuffer_tLogRow_1.append("|");

									if (row3.Register_Language_Encoding != null) { //

										strBuffer_tLogRow_1
												.append(String
														.valueOf(row3.Register_Language_Encoding));

									} //

									strBuffer_tLogRow_1.append("|");

									if (row3.Register_Version != null) { //

										strBuffer_tLogRow_1
												.append(FormatterUtils
														.formatUnwithE(row3.Register_Version));

									} //

									strBuffer_tLogRow_1.append("|");

									if (row3.Register_Date != null) { //

										strBuffer_tLogRow_1
												.append(FormatterUtils
														.format_Date(
																row3.Register_Date,
																"dd/MM/yyyy"));

									} //

									strBuffer_tLogRow_1.append("|");

									if (row3.Date_Of_Last_Change != null) { //

										strBuffer_tLogRow_1
												.append(FormatterUtils
														.format_Date(
																row3.Date_Of_Last_Change,
																"dd/MM/yyyy"));

									} //

									strBuffer_tLogRow_1.append("|");

									if (row3.errorMessage != null) { //

										strBuffer_tLogRow_1.append(String
												.valueOf(row3.errorMessage));

									} //

									if (globalMap.get("tLogRow_CONSOLE") != null) {
										consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
												.get("tLogRow_CONSOLE");
									} else {
										consoleOut_tLogRow_1 = new java.io.PrintStream(
												new java.io.BufferedOutputStream(
														System.out));
										globalMap.put("tLogRow_CONSOLE",
												consoleOut_tLogRow_1);
									}

									consoleOut_tLogRow_1
											.println(strBuffer_tLogRow_1
													.toString());
									consoleOut_tLogRow_1.flush();
									nb_line_tLogRow_1++;
									// ////

									// ////

									// /////////////////////

									tos_count_tLogRow_1++;

									/**
									 * [tLogRow_1 main ] stop
									 */

								} // End of branch "row3"

							} // End of branch "row1"

							/**
							 * [tFileInputExcel_1 end ] start
							 */

							currentComponent = "tFileInputExcel_1";

							nb_line_tFileInputExcel_1++;
						}
						globalMap.put("tFileInputExcel_1_NB_LINE",
								nb_line_tFileInputExcel_1);
					} finally {

						if (!(source_tFileInputExcel_1 instanceof java.io.InputStream)) {
							workbook_tFileInputExcel_1.getPackage().revert();
						}

					}

					ok_Hash.put("tFileInputExcel_1", true);
					end_Hash.put("tFileInputExcel_1",
							System.currentTimeMillis());

					/**
					 * [tFileInputExcel_1 end ] stop
					 */

					/**
					 * [tFilterRow_2 end ] start
					 */

					currentComponent = "tFilterRow_2";

					globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
					globalMap.put("tFilterRow_2_NB_LINE_OK",
							nb_line_ok_tFilterRow_2);
					globalMap.put("tFilterRow_2_NB_LINE_REJECT",
							nb_line_reject_tFilterRow_2);
					if (execStat) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}

					ok_Hash.put("tFilterRow_2", true);
					end_Hash.put("tFilterRow_2", System.currentTimeMillis());

					/**
					 * [tFilterRow_2 end ] stop
					 */

					/**
					 * [tLogRow_1 end ] start
					 */

					currentComponent = "tLogRow_1";

					// ////
					// ////
					globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

					// /////////////////////
					if (execStat) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}

					ok_Hash.put("tLogRow_1", true);
					end_Hash.put("tLogRow_1", System.currentTimeMillis());

					/**
					 * [tLogRow_1 end ] stop
					 */

					/**
					 * [tReplicate_1 end ] start
					 */

					currentComponent = "tReplicate_1";

					if (execStat) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}

					ok_Hash.put("tReplicate_1", true);
					end_Hash.put("tReplicate_1", System.currentTimeMillis());

					/**
					 * [tReplicate_1 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_1 end ] start
					 */

					currentComponent = "tFileOutputDelimited_1";

				} finally {
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
					globalMap.put("tFileOutputDelimited_1_NB_LINE",
							nb_line_tFileOutputDelimited_1);
					globalMap.put("tFileOutputDelimited_1_FILE_NAME",
							fileName_tFileOutputDelimited_1);
				} // finally

				if (execStat) {
					runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
				}

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_1 end ] start
				 */

				currentComponent = "tPostgresqlOutput_1";

				try {
					int countSum_tPostgresqlOutput_1 = 0;
					if (pstmt_tPostgresqlOutput_1 != null) {
						for (int countEach_tPostgresqlOutput_1 : pstmt_tPostgresqlOutput_1
								.executeBatch()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0
									: countEach_tPostgresqlOutput_1);
						}
					}

					insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tPostgresqlOutput_1 = 0;
					for (int countEach_tPostgresqlOutput_1 : e
							.getUpdateCounts()) {
						countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0
								: countEach_tPostgresqlOutput_1);
					}

					insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;

					System.out.println(e.getMessage());

				}

				if (pstmt_tPostgresqlOutput_1 != null) {

					pstmt_tPostgresqlOutput_1.close();

				}

				conn_tPostgresqlOutput_1.commit();
				conn_tPostgresqlOutput_1.close();

				nb_line_deleted_tPostgresqlOutput_1 = nb_line_deleted_tPostgresqlOutput_1
						+ deletedCount_tPostgresqlOutput_1;
				nb_line_update_tPostgresqlOutput_1 = nb_line_update_tPostgresqlOutput_1
						+ updatedCount_tPostgresqlOutput_1;
				nb_line_inserted_tPostgresqlOutput_1 = nb_line_inserted_tPostgresqlOutput_1
						+ insertedCount_tPostgresqlOutput_1;
				nb_line_rejected_tPostgresqlOutput_1 = nb_line_rejected_tPostgresqlOutput_1
						+ rejectedCount_tPostgresqlOutput_1;

				globalMap.put("tPostgresqlOutput_1_NB_LINE",
						nb_line_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_1);
				if (execStat) {
					runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
				}

				ok_Hash.put("tPostgresqlOutput_1", true);
				end_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlOutput_1 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			runStat.stopThreadStat();
			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal threadLocal = new ThreadLocal();
	{
		java.util.Map threadRunResultMap = new java.util.HashMap();
		threadRunResultMap.put("errorCode", null);
		threadRunResultMap.put("status", "");
		threadLocal.set(threadRunResultMap);
	}

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Just_anything Just_anythingClass = new Just_anything();

		int exitCode = Just_anythingClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = Just_anything.class
					.getClassLoader().getResourceAsStream(
							"dojo/just_anything_0_1/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}

		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {

		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputExcel_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputExcel_1) {

			e_tFileInputExcel_1.printStackTrace();
			globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", -1);

		} finally {
		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : Just_anything");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 99080 characters generated by Talend Open Studio for Data Integration on the
 * June 25, 2013 10:42:14 AM EST
 ************************************************************************************************/
